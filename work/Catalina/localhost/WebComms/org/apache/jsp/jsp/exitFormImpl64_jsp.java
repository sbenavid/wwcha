/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.54
 * Generated at: 2019-10-09 17:33:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.nortel.applications.ccmm.ci.datatypes.*;
import com.nortel.applications.ccmm.ci.webservices.*;

public final class exitFormImpl64_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");


   //Avaya Aura Contact Center Multimedia 
   //Copyright 2014 Avaya Inc. All Rights Reserved
   
   // This page contains logic to determine how the browser close events
   // are handled. If a customer is in an active session with an agent, a 
   // disconnect message is sent. If the customer is on hold waiting for 
   // an agent to join, the contact is dropped from the queue.

   String 		sessionKey;
   String 		contactID;
   String 		inSession;

   String ccmmHostname  = application.getInitParameter("CCMM_HOSTNAME");
   String webServerName  = application.getInitParameter("WEBCOMMS_HOSTNAME");
   String webServerPort  = application.getInitParameter("WEBCOMMS_PORT");
   String homePath = application.getInitParameter("HOME_PATH");
   
   
   request.setCharacterEncoding("utf-8");
   sessionKey=request.getParameter("sessionKey");
   contactID=request.getParameter("contactID");
   inSession=request.getParameter("inSession");
   
   long lSession = new Long(inSession).longValue();

   try
   {

	java.net.URL ciWebCommsWsUrl = new java.net.URL("http://" + ccmmHostname + "/ccmmwebservices/CIWebCommsWs.asmx"); 

	CIWebCommsWs webCommsWsLocator = new CIWebCommsWsLocator();
	CIWebCommsWsSoap webCommsWs = webCommsWsLocator.getCIWebCommsWsSoap( ciWebCommsWsUrl );
		
	// We can either prefix the disconnect message with a generic customer prefix
	// as configured in the CCMM Administrator or alternatively we can choose to
	// prefix the disconnect message by the customer name
				
	String custLabel = webCommsWs.getCustomerTextChatLabel(sessionKey);
		
	// CICustomerChatNameReadType customerName = webCommsWs.getCustomerTextChatName(new Long(contactID).longValue(), sessionKey);
	// String custLabel = "[" + customerName.getFirstName() + " " + customerName.getLastName() + "]";
		

	// If the contact is still in the queue, i.e. an agent has not yet accepted the contact,
	// we want to abandon its queuing. If it is already in session, notify the agent of the
	// disconnect and let the agent clean up the session. We perform a read to check if the agent has just joined.
		
	
	java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar(2006, 1, 1, 12, 0, 0 );
	
	CIDateTime tm = new CIDateTime();
	tm.setMilliseconds(gCalendar.getTimeInMillis());
	
	
	CIMultipleChatMessageReadType chatMessages = new CIMultipleChatMessageReadType();
	
	chatMessages = webCommsWs.readChatMessage(new Long(contactID).longValue(), tm, false, sessionKey);

	
	CIChatMessageReadType[] arrayOfMessages = chatMessages.getListOfChatMessages();
	int length = 0;
	
	if(arrayOfMessages != null)
	{
	
	     length = arrayOfMessages.length;
	}
	
	if((length == 0) && (lSession==0))
	{
	    // not previously connected with agent and no new messages have arrived
	
	    long stat = webCommsWs.abandonQueuingWebCommsContact(new Long(contactID).longValue(), "Customer Abandoned Session", sessionKey); 
	} 
	else if((length > 0) && (lSession == 0))
	{
	    // not previously connected with agent but a new message has arrived

	   long status = webCommsWs.writeChatMessage(new Long(contactID).longValue(), custLabel + " Session Disconnected", "", CIChatMessageType.Session_Disconnected_by_Customer, sessionKey);    
	}
     	else
	{
	    // previously connected with an agent     
	    long status = webCommsWs.writeChatMessage(new Long(contactID).longValue(), custLabel + " Session Disconnected", "", CIChatMessageType.Session_Disconnected_by_Customer, sessionKey);
            
	}
	     

   }
   catch(Exception e)
   {
       // Handle exceptions....
   }


      out.write("\n");
      out.write("\n");
      out.write("<HTML>\n");
      out.write("<HEAD>\n");
      out.write("\n");
      out.write("<script LANGUAGE=\"JavaScript\">\n");
      out.write("    parent.location=\"endsession64.jsp\";\n");
      out.write("</script>\n");
      out.write("\t\n");
      out.write("</HEAD>\n");
      out.write("<BODY>\n");
      out.write("</BODY>\n");
      out.write("</HTML>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
