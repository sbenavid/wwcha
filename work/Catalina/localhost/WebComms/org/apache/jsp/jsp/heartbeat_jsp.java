/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.54
 * Generated at: 2019-10-09 16:36:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.nortel.applications.ccmm.ci.datatypes.*;
import com.nortel.applications.ccmm.ci.webservices.*;

public final class heartbeat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<HTML>\r\n");
      out.write("  <HEAD>\r\n");
      out.write("     <meta http-equiv=\"refresh\" content=\"30\">\r\n");
      out.write("      \t\r\n");
      out.write("     <script language=\"JavaScript\">\r\n");
      out.write("\r\n");
      out.write("        function setfocus()\r\n");
      out.write("        {\r\n");
      out.write("           parent.chatwrite.document.chatform.customerchat.focus();\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("     </script>\r\n");
      out.write("\r\n");
      out.write("  </HEAD>\r\n");
      out.write("  <Body onload=setfocus()>\r\n");
      out.write("  <FORM name=\"heartbeat\">\r\n");
      out.write("\r\n");



   //Avaya Aura Contact Center Multimedia 
   //Copyright ï¿½ 2010 Avaya Inc. All Rights Reserved

   // Allow an extra 300 Miliseconds to ensure dependant frames (e.g. Status) have loaded
   Thread.sleep(300);
   
   String 			sessionKey;
   String 			contactID;
   CIDateTime dt 		= new CIDateTime();
   CIDateTime serverTime 	= new CIDateTime();
   long				theLastAgentPollTime = 0;
   long				theCurrentTime = 0;
   long				dateDifferential = 0;
   
   String ccmmHostname  = application.getInitParameter("CCMM_HOSTNAME");


   request.setCharacterEncoding("utf-8");
   sessionKey=request.getParameter("sessionKey");
   contactID=request.getParameter("contactID");

   try
   {
   
   
   	// This page is reloaded every 30 seconds. It acts as a heartbeat to determine if
   	// the session is still active i.e. provide notification to the customer if the 
   	// agent has left the session etc. It does this by updating a timer held in the database,
   	// (which is checked by the agent desktop for the same purpose) and retrieving the last time
   	// the agent updated their timer. It then gets the time difference (from the server time).
   	// This method is independant of timezone and Daylight Savings Time - if our customer and agent 
   	// are in different timezones, this method will still work as the time the agent last updated
   	// their timer and the server timer are both returned as the number of milliseconds since
   	// Jan 1, 1970 UTC. All times are taken from the CCMM server, clock discrepencies with the 
   	// webserver will not impact the application.
   

	java.net.URL ciWebCommsWsUrl = new java.net.URL("http://" + ccmmHostname + "/ccmmwebservices/CIWebCommsWs.asmx"); 
	java.net.URL ciUtilityWsUrl = new java.net.URL("http://" + ccmmHostname + "/ccmmwebservices/CIUtilityWs.asmx"); 

	CIWebCommsWs webCommsWsLocator = new CIWebCommsWsLocator();
	CIWebCommsWsSoap webCommsWs = webCommsWsLocator.getCIWebCommsWsSoap( ciWebCommsWsUrl );

	dt = webCommsWs.updateAliveTime(new Long(contactID).longValue(), sessionKey); 
	
	theLastAgentPollTime = dt.getMilliseconds();
	
	
	CIUtilityWs utilWsLocator = new CIUtilityWsLocator();
	CIUtilityWsSoap utilWs = utilWsLocator.getCIUtilityWsSoap( ciUtilityWsUrl );

	serverTime = utilWs.getServerTime();
			
	dateDifferential = (serverTime.getMilliseconds() - theLastAgentPollTime) / 1000;

   }
   catch(java.rmi.RemoteException re)
   {
	if(re.getMessage().indexOf("8756") > -1)
	{
	    dateDifferential = -2; //session completed
	}
	else
	{
	    dateDifferential = -1;  // no agent yet
	}	
   }
   catch(Exception e)
   {
	dateDifferential = -2; // session has completed
   }


      out.write("\r\n");
      out.write("    <INPUT TYPE=HIDDEN NAME=dt value=\"");
      out.print(dateDifferential);
      out.write("\">\r\n");
      out.write("    <INPUT TYPE=HIDDEN NAME=theLastAgentPollTime value=\"");
      out.print(theLastAgentPollTime);
      out.write("\">\r\n");
      out.write("    <INPUT TYPE=HIDDEN NAME=polledServerTime value=\"");
      out.print(serverTime.getMilliseconds());
      out.write("\">\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("    <script language=\"Javascript\">\r\n");
      out.write("\tif(heartbeat.dt.value == -1)\r\n");
      out.write("\t{\r\n");
      out.write("   \t   // agent has not yet joined the session\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.status.value = \"Status: Not Connected\";\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.isWriting.value = \"\";\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.inSession.value = \"0\";\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\telse if (heartbeat.dt.value == -2)\r\n");
      out.write("\t{\r\n");
      out.write("\t   // agent has disconnected from the session\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.status.value = \"Status: Not Connected\";\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.isWriting.value = \"\";\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.inSession.value = \"0\";\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\telse if (heartbeat.dt.value > 75)\r\n");
      out.write("\t{\r\n");
      out.write("\t   // agent has lost the session\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.status.value = \"Status: Not Connected\";\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.isWriting.value = \"\";\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.inSession.value = \"0\";\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\telse\r\n");
      out.write("\t{\r\n");
      out.write("\t   // agent is active on the session\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.status.value = \"Status: Active\";\r\n");
      out.write("\t\tparent.statuscontrol.document.statusform.inSession.value = \"1\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("   </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</HTML>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
